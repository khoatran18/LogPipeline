sources:
  source_kafka:
    type: kafka
    bootstrap_servers: broker1:29092
    group_id: access_log
    topics:
      - access_log
    auto_offset_reset: earliest
    acknowledgements:
      enabled: true
    decoding:
      codec: bytes
    drain_timeout_ms: 2500
    fetch_wait_max_ms: 100

transforms:
  parse_json:
    type: remap
    inputs:
      - source_kafka
    drop_on_abort: true
    source: |
      .message = decode_charset!(.message, "utf-8")
      .log_type = "access_log"
      check1 = parse_regex!(.message, r'(?P<ip>\d{1,3}(?:\.\d{1,3}){3}) - - \[(?P<timestamp>[0-9/\:\+\- ]+)\] \"(?P<method>\w+) (?P<url>[^ ]+) (?P<protocol>[\w/\.]+)\" (?P<status>\d+) (?P<bytes>\d+) \"(?P<user_agent>[^"]+)\" \"(?P<refer>[^"]+)\"')
      .ip = check1.ip
      .timestamp = check1.timestamp
      .method = check1.method
      .url = check1.url
      .protocol = check1.protocol
      .status = check1.status
      .bytes = check1.bytes
      .user_agent = check1.user_agent
      .refer = check1.refer

  split_routes:
    type: exclusive_route
    inputs:
      - parse_json
    routes:
      - name: "sample"
        condition:
          type: "vrl"
          source: |
            statics = [ ".html", ".htm", ".css", ".js", ".mjs", ".jsx", ".tsx", ".png", ".jpg", ".jpeg", ".gif", ".webp", ".avif", ".svg", ".ico", ".bmp", ".tiff", ".mp3", ".wav", ".ogg", ".mp4", ".webm", ".mov", ".avi", ".mkv", ".woff", ".woff2", ".ttf", ".otf", ".eot", ".json", ".xml", ".txt",]
            check_url = false
            for_each(statics) -> |_, static| {
              if (contains(string!(.url), static)) {
                check_url = true
              }
            }
            check_url
      - name: "dangerous"
        condition:
          type: "vrl"
          source: |
            methods = ["POST", "PUT", "DELETE"]
            check_method = false
            check_status = false
            
            for_each(methods) -> |_, refer| {
              if contains(string!(.method), refer) {
                check_method = true
              }
            }
            check_status = to_int!(.status) >= 400
            
            check_method || check_status 

      - name: "dedupe"
        condition:
          type: "vrl"
          source: |
            true

  sample_route:
    type: sample
    inputs:
      - split_routes.sample
    ratio: 0.2
    sample_rate_key: ""

  dedupe_route:
    type: dedupe
    inputs:
      - split_routes.dedupe
    cache:
      num_events: 5000
    fields:
      match:
        - method
        - status
        - url
        - ip


sinks:
  console_output:
    type: console
    inputs:
      - sample_route
      - dedupe_route
      - split_routes.dangerous
    target: stdout
    encoding:
      codec: json

  kafka_output:
    type: kafka
    inputs:
      - sample_route
      - dedupe_route
      - split_routes.dangerous
    bootstrap_servers: broker1:29092
    topic: enrich_topic
    encoding:
      codec: json
    buffer:
      type: disk
      max_size: 268435490
      when_full: block









tests:
  - name: "Test reduce route"
    inputs:
      - insert_at: parse_json
        type: log
        log_fields:
          message: '192.168.1.10 - - [25/05/2025:10:00:00 +0700] "GET /assets/logo.png HTTP/1.1" 200 1234 "Mozilla/5.0" "https://google.com"'
    outputs:
      - extract_from: split_routes.sample
        conditions:
          - type: vrl
            source: |
              assert_eq!(.url, "/assets/logo.png", "can be reduce")

  - name: "Test dangerous route"
    inputs:
      - insert_at: parse_json
        type: log
        log_fields:
          message: '192.168.1.10 - - [25/05/2025:10:00:00 +0700] "PUT /check HTTP/1.1" 500 1234 "Mozilla/5.0" "https://google.com"'
    outputs:
      - extract_from: split_routes.dangerous
        conditions:
          - type: vrl
            source: |
              assert_eq!(.timestamp, "25/05/2025:10:00:00 +0700", "can be dangerous")

  - name: "Test dedupe route"
    inputs:
      - insert_at: parse_json
        type: log
        log_fields:
          message: '192.168.1.10 - - [25/05/2025:10:00:00 +0700] "GET /check HTTP/1.1" 200 1234 "Mozilla/5.0" "https://google.com"'
    outputs:
      - extract_from: split_routes.dedupe
        conditions:
          - type: vrl
            source: |
              assert_eq!(.ip, "192.168.1.10", "can be dedupe")
      
