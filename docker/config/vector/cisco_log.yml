sources:
  source_kafka:
    type: kafka
    bootstrap_servers: broker1:29092
    group_id: cisco_log
    topics:
      - cisco_log
    auto_offset_reset: earliest
    acknowledgements:
      enabled: true
    decoding:
      codec: bytes
    drain_timeout_ms: 2500
    fetch_wait_max_ms: 100

transforms:
  parse_json:
    type: remap
    inputs:
      - source_kafka
    drop_on_abort: true
    source: |
      .message = decode_charset!(.message, "utf-8")
      .log_type = "cisco_log"
      check1 = parse_regex!(.message, r'%ASA-(?P<severity>\d+)-.+') 
      if (to_int!(check1.severity) == 7) {
        .severity = check1.severity
        check2 = parse_regex!(.message, r'%ASA-(?P<severity>\d+)-(?P<message_id>\d+): (?P<message_text>.+)')
        .message_text = check2.message_text
        .message_id = check2.message_id
      } else {
        .severity = check1.severity
        check2 = parse_regex!(.message, r'%ASA-(?P<severity>\d+)-(?P<message_id>\d+): (?P<message_text>.+)')
        .message_id = check2.message_id
        if (match(check2.message_text, r'Teardown .+')) {
          .event_type = "connection_teardown"
          check3 = parse_regex!(check2.message_text, r'Teardown (?P<protocol>\w+) connection (?P<conn_id>\d+) for (?P<src_zone>\w+):(?P<src_ip>\d{1,3}(?:\.\d{1,3}){3})/(?P<src_port>\d+) to (?P<dst_zone>\w+):(?P<dst_ip>\d{1,3}(?:\.\d{1,3}){3})/(?P<dst_port>\d+) duration (?P<duration>\d{1,2}(?:\:\d{1,2}){2}) bytes (?P<bytes>\d+)')
          .protocol = check3.protocol
          .conn_id = check3.conn_id
          .src_zone = check3.src_zone
          .src_ip = check3.src_ip
          .src_port = check3.src_port
          .dst_zone = check3.dst_zone
          .dst_ip = check3.dst_ip
          .dst_port = check3.dst_port
          .duration = check3.duration
          .bytes = check3.bytes
        } else if (match(check2.message_text, r'Deny .+')) {
          .event_type = "connection_denied"
          check3 = parse_regex!(check2.message_text, r'Deny (?P<protocol>\w+) src (?P<src_zone>\w+):(?P<src_ip>\d{1,3}(?:\.\d{1,3}){3})/(?P<src_port>\d+) dst (?P<dst_zone>\w+):(?P<dst_ip>\d{1,3}(?:\.\d{1,3}){3})/(?P<dst_port>\d+) by access-group "(?P<access_group>[^"]+)"')
          .protocol = check3.protocol
          .src_zone = check3.src_zone
          .src_ip = check3.src_ip
          .src_port = check3.src_port
          .dst_zone = check3.dst_zone
          .dst_ip = check3.dst_ip
          .dst_port = check3.dst_port
          .access_group = check3.access_group
        } else if (match(check2.message_text, r'Built dynamic .+')) {
          .event_type = "nat_translation"
          check3 = parse_regex!(check2.message_text, r'Built dynamic (?P<protocol>\w+) translation from (?P<src_zone>\w+):(?P<src_ip>\d{1,3}(?:\.\d{1,3}){3})/(?P<src_port>\d+) to (?P<dst_zone>\w+):(?P<dst_ip>\d{1,3}(?:\.\d{1,3}){3})/(?P<dst_port>\d+)')
          .protocol = check3.protocol
          .src_zone = check3.src_zone
          .src_ip = check3.src_ip
          .src_port = check3.src_port
          .dst_zone = check3.dst_zone
          .dst_ip = check3.dst_ip
          .dst_port = check3.dst_port
        } else if (match(check2.message_text, r'Built ICMP connection .+')) {
          .event_type = "icmp_connection"
          check3 = parse_regex!(check2.message_text, r'Built ICMP connection for faddr (?P<dst_ip>\d{1,3}(\.\d{1,3}){3})/0 gaddr (?P<nat_ip>\d{1,3}(\.\d{1,3}){3})/0 laddr (?P<src_ip>\d{1,3}(\.\d{1,3}){3})/0')
          .dst_ip = check3.dst_ip
          .nat_ip = check3.nat_ip
          .src_ip = check3.src_ip
        } else if (match(check2.message_text, r'Built \w+ \w+ connection .+')) {
          .event_type = "connection_build"
          check3 = parse_regex!(check2.message_text, r'Built (?P<direction>\w+) (?P<protocol>\w+) connection (?P<conn_id>\d+) for (?P<src_zone>\w+):(?P<src_ip>\d{1,3}(?:\.\d{1,3}){3})/(?P<src_port>\d+)(?: \((?P<nat_ip>\d{1,3}(?:\.\d{1,3}){3})/(?P<nat_port>\d+)\))? to (?P<dst_zone>\w+):(?P<dst_ip>\d{1,3}(?:\.\d{1,3}){3})/(?P<dst_port>\d+)')
          .protocol = check3.protocol
          .conn_id = check3.conn_id
          .src_zone = check3.src_zone
          .src_ip = check3.src_ip
          .src_port = check3.src_port
          .dst_zone = check3.dst_zone
          .dst_ip = check3.dst_ip
          .dst_port = check3.dst_port

          if (!is_null(check3.nat_ip)) {
            .nat_ip = check3.nat_ip
            .nat_port = check3.nat_port
          }
        }
        
      }

  split_routes:
    type: exclusive_route
    inputs:
      - parse_json
    routes:
      - name: "sample"
        condition:
          type: vrl
          source: |
            to_int!(.severity) == 7
      - name: "dangerous"
        condition:
          type: vrl
          source: |
            string!(.event_type) == "connection_denied" || string!(.event_type) == "connection_teardown"
      - name: "dedupe"
        condition:
          type: vrl
          source: |
            true

  sample_route:
    type: sample
    inputs:
      - split_routes.sample
    ratio: 0.2
    sample_rate_key: ""

  dedupe_route:
    type: dedupe
    inputs:
      - split_routes.dedupe
    cache:
      num_events: 10000
    fields:
      match:
        - severity
        - event_type
        - src_ip
        - dst_ip
            

sinks:
  console_output:
    type: console
    inputs:
      - sample_route
      - dedupe_route
      - split_routes.dangerous
    target: stdout
    encoding:
      codec: json

  kafka_output:
    type: kafka
    inputs:
      - sample_route
      - dedupe_route
      - split_routes.dangerous
    bootstrap_servers: broker1:29092
    topic: enrich_topic
    encoding:
      codec: json
    buffer:
      type: disk
      max_size: 268435490
      when_full: block



tests:
  - name: "Test reduce route"
    inputs:
      - insert_at: parse_json
        type: log
        log_fields:
          message: '%ASA-7-110002: No route to host'
    outputs:
      - extract_from: split_routes.sample
        conditions:
          - type: vrl
            source: |
              assert_eq!(.severity, "7", "can be reduce")

  - name: "Test dangerous route"
    inputs:
      - insert_at: parse_json
        type: log
        log_fields:
          message: '%ASA-6-302014: Teardown TCP connection 20534 for outside:18.242.207.157/16708 to inside:192.168.234.151/57829 duration 0:04:29 bytes 1594'
    outputs:
      - extract_from: split_routes.dangerous
        conditions:
          - type: vrl
            source: |
              assert_eq!(.event_type, "connection_teardown", "can be dangerous")

  - name: "Test dedupe route"
    inputs:
      - insert_at: parse_json
        type: log
        log_fields:
          message: '%ASA-6-305011: Built dynamic UDP translation from outside:231.88.244.11/43315 to outside:208.218.171.35/57317'
    outputs:
      - extract_from: split_routes.dedupe
        conditions:
          - type: vrl
            source: |
              assert_eq!(.event_type, "nat_translation", "can be dedupe")

