services:
  broker1:
    image: apache/kafka:latest
    hostname: broker1
    container_name: broker1
    restart: unless-stopped
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker1:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_LOG_RETENTION_MS: "9000000"
      KAFKA_LOG_RETENTION_BYTES: "2147483648"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker1:29093 #,2@broker2:29093,3@broker3:29093
      KAFKA_LISTENERS: PLAINTEXT://broker1:29092,CONTROLLER://broker1:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs-1
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
    healthcheck:
      test: [ "CMD", "sh", "-c", "nc -z broker1 29092 || exit 1" ]
      interval: 5s
      timeout: 3s
      retries: 10
    networks:
      - log-pipeline-net

  #  broker2:
  #    image: apache/kafka:latest
  #    hostname: broker2
  #    container_name: broker2
  #    restart: unless-stopped
  #    ports:
  #      - 9093:9093
  #    environment:
  #      KAFKA_BROKER_ID: 2
  #      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
  #      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker2:29092,PLAINTEXT_HOST://localhost:9093
  #      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
  #      KAFKA_LOG_RETENTION_MS: "9000000"
  #      KAFKA_LOG_RETENTION_BYTES: "2147483648"
  #      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
  #      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
  #      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  #      KAFKA_PROCESS_ROLES: broker,controller
  #      KAFKA_NODE_ID: 2
  #      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker1:29093,2@broker2:29093,3@broker3:29093
  #      KAFKA_LISTENERS: PLAINTEXT://broker2:29092,CONTROLLER://broker2:29093,PLAINTEXT_HOST://0.0.0.0:9093
  #      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
  #      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs-2
  #      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
  #    healthcheck:
  #      test: [ "CMD", "sh", "-c", "nc -z broker1 29092 || exit 1" ]
  #      interval: 5s
  #      timeout: 3s
  #      retries: 10
  #    networks:
  #      - log-pipeline-net
  #
  #  broker3:
  #    image: apache/kafka:latest
  #    hostname: broker3
  #    container_name: broker3
  #    restart: unless-stopped
  #    ports:
  #      - 9094:9094
  #    environment:
  #      KAFKA_BROKER_ID: 3
  #      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
  #      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker3:29092,PLAINTEXT_HOST://localhost:9094
  #      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
  #      KAFKA_LOG_RETENTION_MS: "9000000"
  #      KAFKA_LOG_RETENTION_BYTES: "2147483648"
  #      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
  #      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
  #      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  #      KAFKA_PROCESS_ROLES: broker,controller
  #      KAFKA_NODE_ID: 3
  #      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker1:29093,2@broker2:29093,3@broker3:29093
  #      KAFKA_LISTENERS: PLAINTEXT://broker3:29092,CONTROLLER://broker3:29093,PLAINTEXT_HOST://0.0.0.0:9094
  #      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
  #      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs-3
  #      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
  #    healthcheck:
  #      test: [ "CMD", "sh", "-c", "nc -z broker1 29092 || exit 1" ]
  #      interval: 5s
  #      timeout: 3s
  #      retries: 10
  #    networks:
  #      - log-pipeline-net

  vector_access_log:
    image: timberio/vector:0.46.1-debian
    hostname: vector_log
    container_name: vector_access_log
    restart: unless-stopped
    ports:
      - 8686:8686
    depends_on:
      broker1:
        condition: service_healthy
#      broker2:
#        condition: service_healthy
#      broker3:
#        condition: service_healthy
    volumes:
      - ./config/vector/access_log.yml:/etc/vector/vector.yaml:ro
    networks:
      - log-pipeline-net

  vector_cisco_log:
    image: timberio/vector:0.46.1-debian
    hostname: vector_log
    container_name: vector_cisco_log
    restart: unless-stopped
    ports:
      - 8687:8686
    depends_on:
      broker1:
        condition: service_healthy
#      broker2:
#        condition: service_healthy
#      broker3:
#        condition: service_healthy
    volumes:
      - ./config/vector/cisco_log.yml:/etc/vector/vector.yaml:ro
    networks:
      - log-pipeline-net

  vector_error_log:
    image: timberio/vector:0.46.1-debian
    hostname: vector_log
    container_name: vector_error_log
    restart: unless-stopped
    ports:
      - 8688:8686
    depends_on:
      broker1:
        condition: service_healthy
#      broker2:
#        condition: service_healthy
#      broker3:
#        condition: service_healthy
    volumes:
      - ./config/vector/error_log.yml:/etc/vector/vector.yaml:ro
    networks:
      - log-pipeline-net

  vector_window_log:
    image: timberio/vector:0.46.1-debian
    hostname: vector_log
    container_name: vector_window_log
    restart: unless-stopped
    ports:
      - 8689:8686
    depends_on:
      broker1:
        condition: service_healthy
#      broker2:
#        condition: service_healthy
#      broker3:
#        condition: service_healthy
    volumes:
      - ./config/vector/window_log.yml:/etc/vector/vector.yaml:ro
    networks:
      - log-pipeline-net

  vector_enrich:
    image: timberio/vector:0.46.1-debian
    hostname: enrich_vector
    container_name: vector_enrich
    restart: unless-stopped
    ports:
      - 8690:8686
    depends_on:
      broker1:
        condition: service_healthy
#      broker2:
#        condition: service_healthy
#      broker3:
#        condition: service_healthy
    volumes:
      - ./config/vector/enrich_vector.yml:/etc/vector/vector.yaml:ro
      - ./data/GeoLite2-City.mmdb:/data/GeoLite2-City.mmdb
      - ./data/threat_ip.csv:/data/threat_ip.csv
    networks:
      - log-pipeline-net

  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.11.0
    restart: unless-stopped
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
    networks:
      - log-pipeline-net
    ports:
      - 9200:9200

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.11.0
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - log-pipeline-net
    depends_on:
      - elasticsearch
    ports:
      - 5601:5601

  minio:
    container_name: minio
    image: minio/minio
    restart: unless-stopped
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    networks:
      - log-pipeline-net
    volumes:
      - ./minio/data:/data
    command: server --console-address ":9001" /data

  clickhouse:
    image: clickhouse/clickhouse-server
    container_name: clickhouse
    restart: unless-stopped
    ports:
      - 8123:8123    # HTTP API
      - 9002:9000    # Native TCP
    environment:
      - CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT=1
    volumes:
      - ./clickhouse/data:/var/lib/clickhouse
    networks:
      - log-pipeline-net

  tabix:
    image: spoonest/clickhouse-tabix-web-client
    container_name: tabix
    restart: unless-stopped
    ports:
      - 8081:80
    depends_on:
      - clickhouse
    networks:
      - log-pipeline-net

networks:
  log-pipeline-net:
    # driver: bridge
    external: true